<CRANTaskView>

<name>Optimization</name>
<topic>Optimization and Mathematical Programming Using R</topic>
<maintainer email="Stefan.Theussl@wu-wien.ac.at">Stefan Theussl</maintainer>
<version>2008-04-25</version>

<info> 
  <p> This CRAN Task View contains a list of packages which offer
  facilities for solving optimization problems. 
<!--
  Typically every regression in statistcs has to somehow solve an
  optimization problem. But these methods are not in the focus of this
  task view. For these methods I refer to the views
  <view>Multivariate</view>, <view>Robust</view> or
  <view>SocialSciences</view>. The aim of  
  this task view is to give an overview of optimizers ...
-->
  Packages are
  categorized in three sections: <a
  href="#GeneralPurposeSolvers">General Purpose Continuous
  Solvers</a> (or in general "Function Minimization"), <a
  href="#MathematicalProgrammingSolvers">Mathematical 
  Programming Solvers</a> and <a href="#SpecificApplications">Specific
  Applications in Optimization</a>.</p> 
 
  <p> Many packages provide functionality for more than one
  of the subjects listed at the end of this task view. E.g., mixed
  integer linear programming solvers typically offer standard linear
  programming 
  routines like the simplex algorithm. Therefore following each package
  description a list of abbreviations describes the typical features
  of the optimizer (i.e., the problems which can be solved). The
  full names of the abbreviations given in square brackets can be
  found at the end of this task view under <a
  href="#ClassificationBySubject">Classification According to Subject</a>.</p> 

  <p> If you think that some package is missing from the list, please
  let me know.
  </p>
  
  <h2><a name="GeneralPurposeSolvers">General Purpose Continuous
  Solvers</a></h2>
  
  <ul>
    <li>Package <pkg priority="core">stats</pkg> offers several
    optimization routines. 
    First, function <code>optim()</code> provides an implementation of
    the Broyden-Fletcher-Goldfarb-Shanno (BFGS) method, 
    bounded BFGS, conjugate gradient, Nelder-Mead, and simulated
    annealing (SANN) optimization
    methods. It utilizes gradients, if provided, for faster
    convergence.
    Then there is <code>optimize()</code> which searches an interval
    for a minimum or maximum of a 
    one-dimensional function and <code>nlminb()</code> offering
    unconstrained and constrained  
    optimization using PORT routines.
    Eventually, <code>constrOptim()</code> is a routine for minimizing a
    function subject to linear inequality constraints using an adaptive
    barrier algorithm. [RGA, QN] 
    </li>
    
    <li> <pkg>clue</pkg> contains the function <code>sumt()</code> for
    solving constrained optimization problems via the Sequential
    Unconstrained Minimization Technique (SUMT). 

    </li>

    <li>Package <pkg>gsl</pkg> provides BFGS, conjugate gradient,
    steepest descent, and Nelder-Mead algorithms. It uses a "line
    search" approach via the function <code>multimin()</code>. It is
    based on the Gnu Scientific Library (GSL). [RGA, QN] 
    </li>

    <li>In package <pkg>trust</pkg>, a routine with the same name offers
    local optimization based on the "trust region" approach.
    </li>
    
    <li><code>subplex()</code> in package <pkg>subplex</pkg> realizes
     unconstrained function optimization based on a subspace
     searching simplex method.
     <!--
	 (a bit similar to Nelder-Mead)
     -->

    <li>In package <pkg>gafit</pkg> <code>gafit()</code> uses a
    genetic algorithm approach to find  
    the minimum of a one-dimensional function.</li>

    <li>Package <pkg>genalg</pkg> contains
    <code>rbga()</code>, an implementation of a genetic algorithm for 
    multi-dimensional function optimization.</li>

    <li>Package <pkg>rgenoud</pkg> offers
    <code>genoud()</code>, a routine which solves quite difficult function 
    minimization/maximization problems by combining evolutionary
    algorithms with  
    a derivative-based (quasi-Newtonian) approach.</li>

    <li>Package <pkg>DEoptim</pkg> provides the routine
    <code>DEoptim()</code> which realizes differential evolution optimization. 
    <!--
	see the <a href="http://www.icsi.berkeley.edu/~storn/code.html">
	Differential Evolution home page</a>.
    -->
    </li>

    </li>
  </ul>


  <h2><a name="MathematicalProgrammingSolvers">Mathematical
  Programming Solvers</a></h2>
 
  This section provides an overview of open source as well as commercial 
  optimizers. Which type of mathematical programming problem can be solved
  by a certain package or function can be seen from the abbreviations in 
  square brackets. For a classification by subject see the list at the
  end of this task view.

  <ul>
    <li>In the <pkg>boot</pkg> package there is a routine called 
    <code>simplex()</code> which realizes the two-phase tableau SIMPLEX 
    method for (relatively small) linear programming problems. [LP]</li>

    <li>Package <pkg>linprog</pkg> solves linear programming problems using 
    the function <code>solveLP()</code> (the solver is based on 
    <pkg>lpSolve</pkg>) and can read model files in MPS
    format. [LP]</li>

    <li>In package <pkg>quadprog</pkg> <code>solve.QP()</code> solves
    quadratic programming problems  
    with linear equality and inequality constraints. [QP]</li>

    <li><pkg>kernlab</pkg> contains the function <code>ipop</code> for
    solving quadratic programming problems. [IPM, QP]
    </li>
    
    <li> <pkg>BB</pkg> contains the function <code>spg</code> providing a
    spectral projected gradient method for large scale optimization with
    simple constraints. It takes a nonlinear objective function as an
    argument as well as simple constraints. 
    </li>

    <li>In package <pkg>fportfolio</pkg> from Rmetrics
    <code>donlp2()</code>, a wrapper for the DONLP2
    solver, offers the minimization of smooth nonlinear functions and
    constraints.  
    Package <a href="http://arumat.net/Rdonlp2/"> Rdonlp2</a> can be
    downloaded separately. [GO, NLP]
    </li>
    <!--
	It may be appropriate for
	small to medium-sized problems.
	[DONLP2 has to be downloaded and installed <a
	href="http://arumat.net/Rdonlp2/"> separately</a>. 
    -->
    <li><pkg>limSolve</pkg> offers to solve linear or quadratic
    optimization functions [LP, QP].
    </li>

    <li>Package <forge>stoprog</forge> is a package for scenario
    generation procedures used in 
    multi-stage stochastic programming. It is currently under
    development on R-Forge. [SP] 
    </li>
  </ul>
   
  <h3>Interfaces to Open Source Optimizers</h3> 

  <ul>
    <li>Package <pkg>lpSolve</pkg> contains the routine <code>lp()</code>)  
    to solve LPs and MILPs by calling the freely available solver
    lp_solve. This solver is based on the 
    revised simplex method and a branch-and-bound (B&amp;B) approach. It
    supports semi-continuous variables and Special Ordered Sets
    (SOS). Furthermore <code>lp.assign()</code> and
    <code>lp.transport()</code> are aimed to solve assignment problems and
    transportation problems respectively. Eventually a fairly new
    package <forge>lp_solve</forge> is currently under development on
    R-Forge. [LP, IP, MILP, SPLP]</li>
  
    <li>Package <pkg>glpk</pkg> as well as package <pkg>Rglpk</pkg>
    provide an interface to  
    the GNU Linear Programming Kit (GLPK). Whereas the former solely
    provides high level access to  
    low level routines the latter offers a high level routine
    <code>Rglpk_solve_LP()</code> to solve  
    MILPS using GLPK. 
    Both packages offer the possibility to use models formulated in the
    MPS format. [LP, IP, MILP, IPM]</li> 
    <!--
	GNU LP or MathProg, can be loaded.
	<code>Rglpk_solve_LP()</code> solves linear and mixed-integer programs 
	applying the GNU Linear Programming Kit (GLPK).  of target
	functions and constraints is done through matrices.
    -->
    
    <li><pkg>Rsymphony</pkg> provides the routine
    <code>Rsymphony_solve_LP()</code> which  
    interfaces the COIN-OR SYMPHONY solver for mixed integer linear
    programs. SYMPHONY applies LP  
    relaxation with a branch-and-cut approach. [LP, IP, MILP]</li>
    <!--  
	 Model equations and inequalities are formulated as matrices. 
    -->

    <li><forge>Rbonmin</forge> and <forge>Rlago</forge> are interfaces
    to the corresponding mixed integer nonlinear optimizers part of
    the COIN-OR project. They
    are currently being developed on R-Forge and will be made
    available as soon as possible. [NLP]
    </li>
   
  </ul>
  
  <h3>Interfaces to Commercial Optimizers</h3>
  
  This section surveys interfaces to commercial solvers. Typically, the
  corresponding libraries have to be installed separately.
  
  <ul>
    <li>Package <pkg>Rcplex</pkg> provides an interface to the CPLEX solver 
    package from ILOG. It provides dual/primal simplex optimizers as well as 
    a barrier optimizer for solving large scale linear 
    and quadratic programs. Furthermore, it offers a mixed integer optimizer
    to solve difficult mixed integer programs. Note that CPLEX is
    <b>not free</b> and you have to get a license from ILOG. [LP, IP,
    BP, QP, MILP, MIQP, IPM]</li>
  </ul>
  


  <!--
      Matching: Multivariate and Propensity Score Matching with Balance Optimization
      
      Provides functions for multivariate and propensity score matching and
      for finding optimal  
      balance based on a genetic search algorithm. A variety of univariate
      and multivariate metrics  
      to determine if balance has been obtained are also provided.
  -->
    
  <h2><a name="SpecificApplications">Specific Applications in
  Optimization</a></h2>
  
  <ul>
    <li> In package <pkg>clue</pkg> <code>solve_LSAP()</code> enables
    the user to solve the linear  
    sum assignment problem (LSAP) using an efficient C implementation of
    the Hungarian algorithm (function <code>solve_LSAP()</code>). [SPLP]
    </li>

    <li>Package <pkg>TSP</pkg> provides a basic infrastructure for
    handling and solving the  
    traveling salesperson problem (TSP). The main routine
    <code>solve_TSP()</code> solves the TSP  
    through several heuristics. In addition, it provides an interface to
    Concorde, one of the best  
    exact TSP solvers currently available. [SPLP]
    </li>
      
    <li> Package <pkg>optmatch</pkg> provides routines for solving
    matching problems by translating 
    them into minimum-cost flow problems, which are in turn solved
    optimally by the RELAX-IV codes  
    of Bertsekas and Tseng (free for research). [SPLP]
    </li>
    
    <li>Package <pkg>goalprog</pkg> provides some functions for
    lexicographic linear goal  
    programming and optimization. Goal programming is a branch of
    multi-objective, multi-criteria decision analysis. [MOP]</li>
        
    <li>Package <pkg>quantreg</pkg> contains variations of simplex and
    of interior point routines (<code>nlrq()</code>,
    <code>crq()</code>). It provides an interface to L1 regression 
    in the R code of function <code>rq()</code>. [SPLP, LP, IPM]</li>
    
    <!--
	The <pkg>desirability</pkg> package contains S3 classes for
	multivariate optimization using 
	the desirability function approach of Harrington (1965) using
	functional forms described 
	by Derringer and Suich (1980).
    -->

    <li><pkg>igraph</pkg>, a package for graph and network analysis,
    uses the very fast igraph C library. It can be used to calculate
    shortest paths, maximal network flows, minimum 
    spanning trees, etc. [GRAPH]</li>

  </ul>

  
  <h2><a name="ClassificationBySubject">Classification According to
  Subject</a></h2>

  <p>What follows is an attempt to provide a by-subject overview of
  packages.
  The full name of the subject as well as the corresponding <a
  href="http://www.ams.org/msc/90Cxx.html">MSC</a> code (if available) are
  given in brackets.
  </p> 
    <ul>
      <li>LP (Linear programming, 90C05): <pkg>boot</pkg>,
      <pkg>glpk</pkg>, <pkg>limSolve</pkg>, <pkg>linprog</pkg>,
      <pkg>lpSolve</pkg>, <pkg>Rglpk</pkg>, <pkg>Rsymphony</pkg>,
      <pkg>Rcplex</pkg>, <pkg>quantreg</pkg> </li>
<!--
      <li>LSP (Large-scale problems, 90C06):
      <pkg>Rsymphony</pkg>, <pkg>Rcplex</pkg> </li>
-->
      <li> GO (Global Optimization): <pkg>fportfolio</pkg>
      (<code>donlp2()</code>)</li>

      <li>SPLP (Special problems of linear programming like transportation,
      multi-index, etc., 90C08): <pkg>clue</pkg>, <pkg>lpSolve</pkg>,
      <pkg>optmatch</pkg>, <pkg>TSP</pkg>, <pkg>quantreg</pkg></li>
   
      <li>BP (Boolean programming, 90C09): <pkg>Rcplex</pkg> </li>

      <li>IP (Integer programming, 90C10): <pkg>lpSolve</pkg>,
      <pkg>glpk</pkg>, <pkg>Rglpk</pkg>, <pkg>Rsymphony</pkg>,
      <pkg>Rcplex</pkg> </li>

      <li>MIP (Mixed integer programming and its variants MILP for LP
      and MIQP for QP, 90C11): <pkg>lpSolve</pkg>, <pkg>glpk</pkg>,
      <pkg>Rglpk</pkg>, <pkg>Rsymphony</pkg>, <pkg>Rcplex</pkg> </li> 

      <li>SP (Stochastic programming, 90C15): <forge>stoprog</forge>
      </li> 

      <li>QP (Quadratic programming, 90C20): <pkg>kernlab</pkg>,
      <pkg>limSolve</pkg>, <pkg>quadprog</pkg>, 
      <pkg>Rcplex</pkg></li>
      <!-- 
	   <li>Semidefinite programming, 90C22</li>
	   <li>Convex programming, 90C25</li> 
	   <li>Nonconvex programming, 90C26</li> 
	   <li>Combinatorial optimization, 90C27</li> 
      -->
      <li>MOP (Multi-objective and goal programming, 90C29):
      <pkg>goalprog</pkg> </li>
 
      <li>NLP (Nonlinear programming, 90C30): <pkg>fportfolio</pkg>
      (<code>donlp2()</code>) 
      </li> 
      <!--
	  <li>Sensitivity, stability, parametric optimization, 90C31</li> 
	  <li>Fractional programming, 90C32</li> 
	  <li>Complementarity problems, 90C33</li> 
	  <li>Semi-infinite programming, 90C34</li>
      -->
      <li>GRAPH (Programming involving graphs or networks, 90C35):
      <pkg>igraph</pkg> </li> 
      <!--	
	  <li>Dynamic programming, 90C39</li>
	  <li>Markov and semi-Markov decision processes, 90C40</li> 
	  <li>Optimality conditions, duality, 90C46</li>
	  <li>Minimax problems, 90C47</li>
	  <li>Programming in abstract spaces, 90C48</li> 
	  <li>Extreme-point and pivoting methods, 90C49</li>
      -->
      <li>IPM (Interior-point methods, 90C51): <pkg>glpk</pkg>,
      <pkg>Rcplex</pkg>, <pkg>quantreg</pkg>
      </li>
      
      <li>RGA (Methods of reduced gradient type, 90C52):
      <pkg priority="core">stats</pkg> (<code>optim()</code>),
      <pkg>gsl</pkg></li>

      <li>QN (Methods of quasi-Newton type, 90C53):
      <pkg priority="core">stats</pkg> (<code>optim()</code>),
      <pkg>gsl</pkg></li>
      <!-- 
	   <li>Methods of successive quadratic programming type, 90C55</li>
	   <li>Derivative-free methods, 90C56</li>
	   <li>Polyhedral combinatorics, branch-and-bound,
	   branch-and-cut, 90C57</li>
	   <li>Approximation methods and heuristics, 90C59</li>
	   <li>Abstract computational complexity for mathematical
	   programming problems, 90C60</li> 
	   <li>LFuzzy programming, 90C70</li> 
	   <li>Applications of mathematical programming, 90C90</li>
	   <li>None of the above, but in this section, 90C99</li>
      -->
    </ul>

</info>

<packagelist>
  <pkg priority="core">stats</pkg>
  <pkg>gsl</pkg>
  <pkg>trust</pkg>
  <pkg>subplex</pkg>
  <pkg>kernlab</pkg>
  <pkg>boot</pkg>
  <pkg>linprog</pkg>
  <pkg>quadprog</pkg>
  <pkg>lpSolve</pkg>
  <pkg>glpk</pkg>
  <pkg>Rglpk</pkg>
  <pkg>Rsymphony</pkg>
  <pkg>Rcplex</pkg>
  <pkg>fportfolio</pkg>
  <pkg>DEoptim</pkg>
  <pkg>gafit</pkg>
  <pkg>genalg</pkg>
  <pkg>rgenoud</pkg>
  <pkg>igraph</pkg>
  <pkg>TSP</pkg>
  <pkg>clue</pkg>
  <pkg>goalprog</pkg>
  <pkg>optmatch</pkg>
  <pkg>desirability</pkg>
  <pkg>quantreg</pkg>
  <pkg>limSolve</pkg>
  <pkg>BB</pkg>
</packagelist>

<links>
  <view>Finance</view>
  <a href="http://wiki.mcs.anl.gov/NEOS/index.php/NEOS_Wiki">NEOS
  Wiki</a>
  <a href="http://plato.asu.edu/sub/pns.html">Decision Tree for
  Optimization Software</a>
  <a href="http://www.coin-or.org/">COIN-OR Project</a>
  <a href="http://www.ams.org/msc/90Cxx.html">Mathematics Subject Classification - Mathematical programming</a>
</links>

</CRANTaskView>




